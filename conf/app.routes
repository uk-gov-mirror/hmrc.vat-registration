# microservice specific routes

POST         /new                                   controllers.VatRegistrationController.newVatRegistration
POST         /insert-s4l-scheme                         controllers.VatRegistrationController.insertVatScheme

POST         /traffic-management/:regId/allocate    controllers.TrafficManagementController.allocate(regId)
GET          /traffic-management/reg-info           controllers.TrafficManagementController.getRegistrationInformation
PUT          /traffic-management/reg-info           controllers.TrafficManagementController.upsertRegistrationInformation()

GET          /scheme                                controllers.VatRegistrationController.retrieveVatSchemeByInternalId()
GET          /:regId/get-scheme                     controllers.VatRegistrationController.retrieveVatScheme(regId: String)

GET          /:regId/trading-details                controllers.TradingDetailsController.fetchTradingDetails(regId)
PATCH        /:regId/trading-details                controllers.TradingDetailsController.updateTradingDetails(regId)

GET          /:regId/flat-rate-scheme               controllers.FlatRateSchemeController.fetchFlatRateScheme(regId)
PATCH        /:regId/flat-rate-scheme               controllers.FlatRateSchemeController.updateFlatRateScheme(regId)
DELETE       /:regId/flat-rate-scheme               controllers.FlatRateSchemeController.removeFlatRateScheme(regId)

GET          /:regId/returns                        controllers.VatRegistrationController.fetchReturns(regId)
PATCH        /:regId/returns                        controllers.VatRegistrationController.updateReturns(regId)

GET          /:regId/acknowledgement-reference      controllers.VatRegistrationController.getAcknowledgementReference(regId: String)

DELETE       /:regId/delete-scheme                  controllers.VatRegistrationController.deleteVatScheme(regId: String)

PATCH        /:regId/transaction-id                 controllers.VatRegistrationController.saveTransId(regId: String)

PUT          /:regID/submit-registration            controllers.VatRegistrationController.submitVATRegistration(regID : String)

GET          /:regId/status                         controllers.VatRegistrationController.getDocumentStatus(regId: String)

GET          /:regId/bank-account                   controllers.VatRegistrationController.fetchBankAccountDetails(regId)
PATCH        /:regId/bank-account                   controllers.VatRegistrationController.updateBankAccountDetails(regId)

GET         /:regId/sicAndComp                      controllers.SicAndComplianceController.getSicAndCompliance(regId: String)
PATCH       /:regId/sicAndComp                      controllers.SicAndComplianceController.updateSicAndCompliance(regId: String)

GET         /:regId/business-contact                controllers.BusinessContactController.getBusinessContact(regId: String)
PATCH       /:regId/business-contact                controllers.BusinessContactController.updateBusinessContact(regId: String)

GET         /threshold/:date                        controllers.VatThresholdController.getThresholdForDate(date: String)

GET         /:regId/eligibility-data                controllers.EligibilityController.getEligibilityData(regId: String)
PATCH       /:regId/eligibility-data                controllers.EligibilityController.updateEligibilityData(regId: String)

GET         /:regId/threshold-data                  controllers.VatRegistrationController.getThreshold(regId: String)
GET         /:regId/turnover-estimates-data         controllers.VatRegistrationController.getTurnoverEstimates(regId: String)

GET         /:regId/applicant-details               controllers.ApplicantDetailsController.getApplicantDetailsData(regId: String)
PATCH       /:regId/applicant-details               controllers.ApplicantDetailsController.updateApplicantDetailsData(regId: String)

PATCH       /:regId/honesty-declaration             controllers.VatRegistrationController.storeHonestyDeclaration(regId: String)

PATCH       /:regId/nrs-payload                     controllers.NrsSubmissionPayloadController.storeNrsSubmissionPayload(regId: String)

POST        /:regId/upscan-reference                controllers.UpscanController.createUpscanDetails(regId: String)
GET         /:regId/upscan-file-details/:reference  controllers.UpscanController.getUpscanDetails(regId: String, reference: String)
POST        /upscan-callback                        controllers.UpscanController.upscanDetailsCallback
